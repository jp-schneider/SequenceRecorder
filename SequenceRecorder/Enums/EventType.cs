//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sequence.Recorder.Enums {
    using Sequence.Recorder.Events;
    using System;
    
    
    public enum EventType {
        
        UNKNOWN = 0,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewMouseDown", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the PreviewMouseDown Event.")]
        PreviewMouseDown = 1,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseDown", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the MouseDown Event.")]
        MouseDown = 2,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewMouseUp", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the PreviewMouseUp Event.")]
        PreviewMouseUp = 3,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseUp", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the MouseUp Event.")]
        MouseUp = 4,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewMouseLeftButtonDown", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the PreviewMouseLeftButtonDown Event.")]
        PreviewMouseLeftButtonDown = 5,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseLeftButtonDown", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the MouseLeftButtonDown Event.")]
        MouseLeftButtonDown = 6,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewMouseLeftButtonUp", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the PreviewMouseLeftButtonUp Event.")]
        PreviewMouseLeftButtonUp = 7,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseLeftButtonUp", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the MouseLeftButtonUp Event.")]
        MouseLeftButtonUp = 8,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewMouseRightButtonDown", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the PreviewMouseRightButtonDown Event.")]
        PreviewMouseRightButtonDown = 9,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseRightButtonDown", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the MouseRightButtonDown Event.")]
        MouseRightButtonDown = 10,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewMouseRightButtonUp", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the PreviewMouseRightButtonUp Event.")]
        PreviewMouseRightButtonUp = 11,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseRightButtonUp", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the MouseRightButtonUp Event.")]
        MouseRightButtonUp = 12,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewMouseMove", typeof(System.Windows.Input.MouseEventHandler), typeof(System.Windows.Input.MouseEventArgs), "Enum for the PreviewMouseMove Event.")]
        PreviewMouseMove = 13,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseMove", typeof(System.Windows.Input.MouseEventHandler), typeof(System.Windows.Input.MouseEventArgs), "Enum for the MouseMove Event.")]
        MouseMove = 14,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewMouseWheel", typeof(System.Windows.Input.MouseWheelEventHandler), typeof(System.Windows.Input.MouseWheelEventArgs), "Enum for the PreviewMouseWheel Event.")]
        PreviewMouseWheel = 15,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseWheel", typeof(System.Windows.Input.MouseWheelEventHandler), typeof(System.Windows.Input.MouseWheelEventArgs), "Enum for the MouseWheel Event.")]
        MouseWheel = 16,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseEnter", typeof(System.Windows.Input.MouseEventHandler), typeof(System.Windows.Input.MouseEventArgs), "Enum for the MouseEnter Event.")]
        MouseEnter = 17,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "MouseLeave", typeof(System.Windows.Input.MouseEventHandler), typeof(System.Windows.Input.MouseEventArgs), "Enum for the MouseLeave Event.")]
        MouseLeave = 18,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "GotMouseCapture", typeof(System.Windows.Input.MouseEventHandler), typeof(System.Windows.Input.MouseEventArgs), "Enum for the GotMouseCapture Event.")]
        GotMouseCapture = 19,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "LostMouseCapture", typeof(System.Windows.Input.MouseEventHandler), typeof(System.Windows.Input.MouseEventArgs), "Enum for the LostMouseCapture Event.")]
        LostMouseCapture = 20,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "QueryCursor", typeof(System.Windows.Input.QueryCursorEventHandler), typeof(System.Windows.Input.QueryCursorEventArgs), "Enum for the QueryCursor Event.")]
        QueryCursor = 21,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusDown", typeof(System.Windows.Input.StylusDownEventHandler), typeof(System.Windows.Input.StylusDownEventArgs), "Enum for the PreviewStylusDown Event.")]
        PreviewStylusDown = 22,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusDown", typeof(System.Windows.Input.StylusDownEventHandler), typeof(System.Windows.Input.StylusDownEventArgs), "Enum for the StylusDown Event.")]
        StylusDown = 23,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusUp", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the PreviewStylusUp Event.")]
        PreviewStylusUp = 24,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusUp", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the StylusUp Event.")]
        StylusUp = 25,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusMove", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the PreviewStylusMove Event.")]
        PreviewStylusMove = 26,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusMove", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the StylusMove Event.")]
        StylusMove = 27,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusInAirMove", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the PreviewStylusInAirMove Event.")]
        PreviewStylusInAirMove = 28,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusInAirMove", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the StylusInAirMove Event.")]
        StylusInAirMove = 29,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusEnter", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the StylusEnter Event.")]
        StylusEnter = 30,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusLeave", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the StylusLeave Event.")]
        StylusLeave = 31,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusInRange", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the PreviewStylusInRange Event.")]
        PreviewStylusInRange = 32,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusInRange", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the StylusInRange Event.")]
        StylusInRange = 33,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusOutOfRange", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the PreviewStylusOutOfRange Event.")]
        PreviewStylusOutOfRange = 34,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusOutOfRange", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the StylusOutOfRange Event.")]
        StylusOutOfRange = 35,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusSystemGesture", typeof(System.Windows.Input.StylusSystemGestureEventHandler), typeof(System.Windows.Input.StylusSystemGestureEventArgs), "Enum for the PreviewStylusSystemGesture Event.")]
        PreviewStylusSystemGesture = 36,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusSystemGesture", typeof(System.Windows.Input.StylusSystemGestureEventHandler), typeof(System.Windows.Input.StylusSystemGestureEventArgs), "Enum for the StylusSystemGesture Event.")]
        StylusSystemGesture = 37,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "GotStylusCapture", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the GotStylusCapture Event.")]
        GotStylusCapture = 38,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "LostStylusCapture", typeof(System.Windows.Input.StylusEventHandler), typeof(System.Windows.Input.StylusEventArgs), "Enum for the LostStylusCapture Event.")]
        LostStylusCapture = 39,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusButtonDown", typeof(System.Windows.Input.StylusButtonEventHandler), typeof(System.Windows.Input.StylusButtonEventArgs), "Enum for the StylusButtonDown Event.")]
        StylusButtonDown = 40,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "StylusButtonUp", typeof(System.Windows.Input.StylusButtonEventHandler), typeof(System.Windows.Input.StylusButtonEventArgs), "Enum for the StylusButtonUp Event.")]
        StylusButtonUp = 41,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusButtonDown", typeof(System.Windows.Input.StylusButtonEventHandler), typeof(System.Windows.Input.StylusButtonEventArgs), "Enum for the PreviewStylusButtonDown Event.")]
        PreviewStylusButtonDown = 42,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewStylusButtonUp", typeof(System.Windows.Input.StylusButtonEventHandler), typeof(System.Windows.Input.StylusButtonEventArgs), "Enum for the PreviewStylusButtonUp Event.")]
        PreviewStylusButtonUp = 43,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewKeyDown", typeof(System.Windows.Input.KeyEventHandler), typeof(System.Windows.Input.KeyEventArgs), "Enum for the PreviewKeyDown Event.")]
        PreviewKeyDown = 44,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "KeyDown", typeof(System.Windows.Input.KeyEventHandler), typeof(System.Windows.Input.KeyEventArgs), "Enum for the KeyDown Event.")]
        KeyDown = 45,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewKeyUp", typeof(System.Windows.Input.KeyEventHandler), typeof(System.Windows.Input.KeyEventArgs), "Enum for the PreviewKeyUp Event.")]
        PreviewKeyUp = 46,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "KeyUp", typeof(System.Windows.Input.KeyEventHandler), typeof(System.Windows.Input.KeyEventArgs), "Enum for the KeyUp Event.")]
        KeyUp = 47,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewGotKeyboardFocus", typeof(System.Windows.Input.KeyboardFocusChangedEventHandler), typeof(System.Windows.Input.KeyboardFocusChangedEventArgs), "Enum for the PreviewGotKeyboardFocus Event.")]
        PreviewGotKeyboardFocus = 48,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "GotKeyboardFocus", typeof(System.Windows.Input.KeyboardFocusChangedEventHandler), typeof(System.Windows.Input.KeyboardFocusChangedEventArgs), "Enum for the GotKeyboardFocus Event.")]
        GotKeyboardFocus = 49,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewLostKeyboardFocus", typeof(System.Windows.Input.KeyboardFocusChangedEventHandler), typeof(System.Windows.Input.KeyboardFocusChangedEventArgs), "Enum for the PreviewLostKeyboardFocus Event.")]
        PreviewLostKeyboardFocus = 50,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "LostKeyboardFocus", typeof(System.Windows.Input.KeyboardFocusChangedEventHandler), typeof(System.Windows.Input.KeyboardFocusChangedEventArgs), "Enum for the LostKeyboardFocus Event.")]
        LostKeyboardFocus = 51,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewTextInput", typeof(System.Windows.Input.TextCompositionEventHandler), typeof(System.Windows.Input.TextCompositionEventArgs), "Enum for the PreviewTextInput Event.")]
        PreviewTextInput = 52,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "TextInput", typeof(System.Windows.Input.TextCompositionEventHandler), typeof(System.Windows.Input.TextCompositionEventArgs), "Enum for the TextInput Event.")]
        TextInput = 53,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewQueryContinueDrag", typeof(System.Windows.QueryContinueDragEventHandler), typeof(System.Windows.QueryContinueDragEventArgs), "Enum for the PreviewQueryContinueDrag Event.")]
        PreviewQueryContinueDrag = 54,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "QueryContinueDrag", typeof(System.Windows.QueryContinueDragEventHandler), typeof(System.Windows.QueryContinueDragEventArgs), "Enum for the QueryContinueDrag Event.")]
        QueryContinueDrag = 55,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewGiveFeedback", typeof(System.Windows.GiveFeedbackEventHandler), typeof(System.Windows.GiveFeedbackEventArgs), "Enum for the PreviewGiveFeedback Event.")]
        PreviewGiveFeedback = 56,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "GiveFeedback", typeof(System.Windows.GiveFeedbackEventHandler), typeof(System.Windows.GiveFeedbackEventArgs), "Enum for the GiveFeedback Event.")]
        GiveFeedback = 57,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewDragEnter", typeof(System.Windows.DragEventHandler), typeof(System.Windows.DragEventArgs), "Enum for the PreviewDragEnter Event.")]
        PreviewDragEnter = 58,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "DragEnter", typeof(System.Windows.DragEventHandler), typeof(System.Windows.DragEventArgs), "Enum for the DragEnter Event.")]
        DragEnter = 59,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewDragOver", typeof(System.Windows.DragEventHandler), typeof(System.Windows.DragEventArgs), "Enum for the PreviewDragOver Event.")]
        PreviewDragOver = 60,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "DragOver", typeof(System.Windows.DragEventHandler), typeof(System.Windows.DragEventArgs), "Enum for the DragOver Event.")]
        DragOver = 61,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewDragLeave", typeof(System.Windows.DragEventHandler), typeof(System.Windows.DragEventArgs), "Enum for the PreviewDragLeave Event.")]
        PreviewDragLeave = 62,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "DragLeave", typeof(System.Windows.DragEventHandler), typeof(System.Windows.DragEventArgs), "Enum for the DragLeave Event.")]
        DragLeave = 63,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewDrop", typeof(System.Windows.DragEventHandler), typeof(System.Windows.DragEventArgs), "Enum for the PreviewDrop Event.")]
        PreviewDrop = 64,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "Drop", typeof(System.Windows.DragEventHandler), typeof(System.Windows.DragEventArgs), "Enum for the Drop Event.")]
        Drop = 65,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewTouchDown", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the PreviewTouchDown Event.")]
        PreviewTouchDown = 66,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "TouchDown", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the TouchDown Event.")]
        TouchDown = 67,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewTouchMove", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the PreviewTouchMove Event.")]
        PreviewTouchMove = 68,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "TouchMove", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the TouchMove Event.")]
        TouchMove = 69,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "PreviewTouchUp", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the PreviewTouchUp Event.")]
        PreviewTouchUp = 70,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "TouchUp", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the TouchUp Event.")]
        TouchUp = 71,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "GotTouchCapture", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the GotTouchCapture Event.")]
        GotTouchCapture = 72,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "LostTouchCapture", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the LostTouchCapture Event.")]
        LostTouchCapture = 73,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "TouchEnter", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the TouchEnter Event.")]
        TouchEnter = 74,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "TouchLeave", typeof(System.EventHandler<System.Windows.Input.TouchEventArgs>), typeof(System.Windows.Input.TouchEventArgs), "Enum for the TouchLeave Event.")]
        TouchLeave = 75,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsMouseDirectlyOverChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsMouseDirectlyOverChanged Event.")]
        IsMouseDirectlyOverChanged = 76,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsKeyboardFocusWithinChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsKeyboardFocusWithinChanged Event.")]
        IsKeyboardFocusWithinChanged = 77,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsMouseCapturedChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsMouseCapturedChanged Event.")]
        IsMouseCapturedChanged = 78,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsMouseCaptureWithinChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsMouseCaptureWithinChanged Event.")]
        IsMouseCaptureWithinChanged = 79,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsStylusDirectlyOverChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsStylusDirectlyOverChanged Event.")]
        IsStylusDirectlyOverChanged = 80,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsStylusCapturedChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsStylusCapturedChanged Event.")]
        IsStylusCapturedChanged = 81,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsStylusCaptureWithinChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsStylusCaptureWithinChanged Event.")]
        IsStylusCaptureWithinChanged = 82,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsKeyboardFocusedChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsKeyboardFocusedChanged Event.")]
        IsKeyboardFocusedChanged = 83,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "LayoutUpdated", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the LayoutUpdated Event.")]
        LayoutUpdated = 84,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "GotFocus", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the GotFocus Event.")]
        GotFocus = 85,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "LostFocus", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the LostFocus Event.")]
        LostFocus = 86,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsEnabledChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsEnabledChanged Event.")]
        IsEnabledChanged = 87,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsHitTestVisibleChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsHitTestVisibleChanged Event.")]
        IsHitTestVisibleChanged = 88,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "IsVisibleChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the IsVisibleChanged Event.")]
        IsVisibleChanged = 89,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "FocusableChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the FocusableChanged Event.")]
        FocusableChanged = 90,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "ManipulationStarting", typeof(System.EventHandler<System.Windows.Input.ManipulationStartingEventArgs>), typeof(System.Windows.Input.ManipulationStartingEventArgs), "Enum for the ManipulationStarting Event.")]
        ManipulationStarting = 91,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "ManipulationStarted", typeof(System.EventHandler<System.Windows.Input.ManipulationStartedEventArgs>), typeof(System.Windows.Input.ManipulationStartedEventArgs), "Enum for the ManipulationStarted Event.")]
        ManipulationStarted = 92,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "ManipulationDelta", typeof(System.EventHandler<System.Windows.Input.ManipulationDeltaEventArgs>), typeof(System.Windows.Input.ManipulationDeltaEventArgs), "Enum for the ManipulationDelta Event.")]
        ManipulationDelta = 93,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "ManipulationInertiaStarting", typeof(System.EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs>), typeof(System.Windows.Input.ManipulationInertiaStartingEventArgs), "Enum for the ManipulationInertiaStarting Event.")]
        ManipulationInertiaStarting = 94,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "ManipulationBoundaryFeedback", typeof(System.EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>), typeof(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs), "Enum for the ManipulationBoundaryFeedback Event.")]
        ManipulationBoundaryFeedback = 95,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: UIElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.UIElement)}, "ManipulationCompleted", typeof(System.EventHandler<System.Windows.Input.ManipulationCompletedEventArgs>), typeof(System.Windows.Input.ManipulationCompletedEventArgs), "Enum for the ManipulationCompleted Event.")]
        ManipulationCompleted = 96,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "TargetUpdated", typeof(System.EventHandler<System.Windows.Data.DataTransferEventArgs>), typeof(System.Windows.Data.DataTransferEventArgs), "Enum for the TargetUpdated Event.")]
        TargetUpdated = 97,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "SourceUpdated", typeof(System.EventHandler<System.Windows.Data.DataTransferEventArgs>), typeof(System.Windows.Data.DataTransferEventArgs), "Enum for the SourceUpdated Event.")]
        SourceUpdated = 98,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "DataContextChanged", typeof(System.Windows.DependencyPropertyChangedEventHandler), typeof(System.Windows.DependencyPropertyChangedEventArgs), "Enum for the DataContextChanged Event.")]
        DataContextChanged = 99,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "RequestBringIntoView", typeof(System.Windows.RequestBringIntoViewEventHandler), typeof(System.Windows.RequestBringIntoViewEventArgs), "Enum for the RequestBringIntoView Event.")]
        RequestBringIntoView = 100,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "SizeChanged", typeof(System.Windows.SizeChangedEventHandler), typeof(System.Windows.SizeChangedEventArgs), "Enum for the SizeChanged Event.")]
        SizeChanged = 101,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "Initialized", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the Initialized Event.")]
        Initialized = 102,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "Loaded", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Loaded Event.")]
        Loaded = 103,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "Unloaded", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Unloaded Event.")]
        Unloaded = 104,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "ToolTipOpening", typeof(System.Windows.Controls.ToolTipEventHandler), typeof(System.Windows.Controls.ToolTipEventArgs), "Enum for the ToolTipOpening Event.")]
        ToolTipOpening = 105,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "ToolTipClosing", typeof(System.Windows.Controls.ToolTipEventHandler), typeof(System.Windows.Controls.ToolTipEventArgs), "Enum for the ToolTipClosing Event.")]
        ToolTipClosing = 106,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "ContextMenuOpening", typeof(System.Windows.Controls.ContextMenuEventHandler), typeof(System.Windows.Controls.ContextMenuEventArgs), "Enum for the ContextMenuOpening Event.")]
        ContextMenuOpening = 107,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: FrameworkElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.FrameworkElement)}, "ContextMenuClosing", typeof(System.Windows.Controls.ContextMenuEventHandler), typeof(System.Windows.Controls.ContextMenuEventArgs), "Enum for the ContextMenuClosing Event.")]
        ContextMenuClosing = 108,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Window.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Window)}, "SourceInitialized", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the SourceInitialized Event.")]
        SourceInitialized = 109,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Window.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Window)}, "Activated", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the Activated Event.")]
        Activated = 111,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Window.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Window)}, "Deactivated", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the Deactivated Event.")]
        Deactivated = 112,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Window.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Window)}, "StateChanged", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the StateChanged Event.")]
        StateChanged = 113,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Window.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Window)}, "LocationChanged", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the LocationChanged Event.")]
        LocationChanged = 114,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Window.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Window)}, "Closing", typeof(System.ComponentModel.CancelEventHandler), typeof(System.ComponentModel.CancelEventArgs), "Enum for the Closing Event.")]
        Closing = 115,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Window, Popup.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Window),
                typeof(System.Windows.Controls.Primitives.Popup)}, "Closed", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the Closed Event.")]
        Closed = 116,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Window, Frame.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Window),
                typeof(System.Windows.Controls.Frame)}, "ContentRendered", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the ContentRendered Event.")]
        ContentRendered = 117,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Control.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Control)}, "PreviewMouseDoubleClick", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the PreviewMouseDoubleClick Event.")]
        PreviewMouseDoubleClick = 118,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Control.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Control)}, "MouseDoubleClick", typeof(System.Windows.Input.MouseButtonEventHandler), typeof(System.Windows.Input.MouseButtonEventArgs), "Enum for the MouseDoubleClick Event.")]
        MouseDoubleClick = 119,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: NavigationWindow, Frame, WebBrowser.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Navigation.NavigationWindow),
                typeof(System.Windows.Controls.Frame),
                typeof(System.Windows.Controls.WebBrowser)}, "Navigating", typeof(System.Windows.Navigation.NavigatingCancelEventHandler), typeof(System.Windows.Navigation.NavigatingCancelEventArgs), "Enum for the Navigating Event.")]
        Navigating = 120,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: NavigationWindow, Frame.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Navigation.NavigationWindow),
                typeof(System.Windows.Controls.Frame)}, "NavigationProgress", typeof(System.Windows.Navigation.NavigationProgressEventHandler), typeof(System.Windows.Navigation.NavigationProgressEventArgs), "Enum for the NavigationProgress Event.")]
        NavigationProgress = 121,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: NavigationWindow, Frame.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Navigation.NavigationWindow),
                typeof(System.Windows.Controls.Frame)}, "NavigationFailed", typeof(System.Windows.Navigation.NavigationFailedEventHandler), typeof(System.Windows.Navigation.NavigationFailedEventArgs), "Enum for the NavigationFailed Event.")]
        NavigationFailed = 122,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: NavigationWindow, Frame, WebBrowser.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Navigation.NavigationWindow),
                typeof(System.Windows.Controls.Frame),
                typeof(System.Windows.Controls.WebBrowser)}, "Navigated", typeof(System.Windows.Navigation.NavigatedEventHandler), typeof(System.Windows.Navigation.NavigationEventArgs), "Enum for the Navigated Event.")]
        Navigated = 123,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: NavigationWindow, Frame, WebBrowser.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Navigation.NavigationWindow),
                typeof(System.Windows.Controls.Frame),
                typeof(System.Windows.Controls.WebBrowser)}, "LoadCompleted", typeof(System.Windows.Navigation.LoadCompletedEventHandler), typeof(System.Windows.Navigation.NavigationEventArgs), "Enum for the LoadCompleted Event.")]
        LoadCompleted = 124,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: NavigationWindow, Frame.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Navigation.NavigationWindow),
                typeof(System.Windows.Controls.Frame)}, "NavigationStopped", typeof(System.Windows.Navigation.NavigationStoppedEventHandler), typeof(System.Windows.Navigation.NavigationEventArgs), "Enum for the NavigationStopped Event.")]
        NavigationStopped = 125,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: NavigationWindow, Frame.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Navigation.NavigationWindow),
                typeof(System.Windows.Controls.Frame)}, "FragmentNavigation", typeof(System.Windows.Navigation.FragmentNavigationEventHandler), typeof(System.Windows.Navigation.FragmentNavigationEventArgs), "Enum for the FragmentNavigation Event.")]
        FragmentNavigation = 126,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: PageFunction`1.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Navigation.PageFunction<>)}, "Return", typeof(System.Windows.Navigation.ReturnEventHandler<>), typeof(object), "Enum for the Return Event.")]
        Return = 127,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: PageContent.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Documents.PageContent)}, "GetPageRootCompleted", typeof(System.Windows.Documents.GetPageRootCompletedEventHandler), typeof(System.Windows.Documents.GetPageRootCompletedEventArgs), "Enum for the GetPageRootCompleted Event.")]
        GetPageRootCompleted = 128,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ButtonBase, MenuItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.ButtonBase),
                typeof(System.Windows.Controls.MenuItem)}, "Click", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Click Event.")]
        Click = 129,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Calendar.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Calendar)}, "SelectedDatesChanged", typeof(System.EventHandler<System.Windows.Controls.SelectionChangedEventArgs>), typeof(System.Windows.Controls.SelectionChangedEventArgs), "Enum for the SelectedDatesChanged Event.")]
        SelectedDatesChanged = 130,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Calendar.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Calendar)}, "DisplayDateChanged", typeof(System.EventHandler<System.Windows.Controls.CalendarDateChangedEventArgs>), typeof(System.Windows.Controls.CalendarDateChangedEventArgs), "Enum for the DisplayDateChanged Event.")]
        DisplayDateChanged = 131,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Calendar.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Calendar)}, "DisplayModeChanged", typeof(System.EventHandler<System.Windows.Controls.CalendarModeChangedEventArgs>), typeof(System.Windows.Controls.CalendarModeChangedEventArgs), "Enum for the DisplayModeChanged Event.")]
        DisplayModeChanged = 132,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Calendar.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Calendar)}, "SelectionModeChanged", typeof(System.EventHandler<System.EventArgs>), typeof(System.EventArgs), "Enum for the SelectionModeChanged Event.")]
        SelectionModeChanged = 133,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ToggleButton, MenuItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.ToggleButton),
                typeof(System.Windows.Controls.MenuItem)}, "Checked", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Checked Event.")]
        Checked = 134,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ToggleButton, MenuItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.ToggleButton),
                typeof(System.Windows.Controls.MenuItem)}, "Unchecked", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Unchecked Event.")]
        Unchecked = 135,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ToggleButton.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.ToggleButton)}, "Indeterminate", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Indeterminate Event.")]
        Indeterminate = 136,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ComboBox.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.ComboBox)}, "DropDownOpened", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the DropDownOpened Event.")]
        DropDownOpened = 137,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ComboBox.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.ComboBox)}, "DropDownClosed", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the DropDownClosed Event.")]
        DropDownClosed = 138,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Selector.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.Selector)}, "SelectionChanged", typeof(System.Windows.Controls.SelectionChangedEventHandler), typeof(System.Windows.Controls.SelectionChangedEventArgs), "Enum for the SelectionChanged Event.")]
        SelectionChanged = 139,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ListBoxItem, DataGridCell, DataGridRow, TreeViewItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.ListBoxItem),
                typeof(System.Windows.Controls.DataGridCell),
                typeof(System.Windows.Controls.DataGridRow),
                typeof(System.Windows.Controls.TreeViewItem)}, "Selected", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Selected Event.")]
        Selected = 140,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ListBoxItem, DataGridCell, DataGridRow, TreeViewItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.ListBoxItem),
                typeof(System.Windows.Controls.DataGridCell),
                typeof(System.Windows.Controls.DataGridRow),
                typeof(System.Windows.Controls.TreeViewItem)}, "Unselected", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Unselected Event.")]
        Unselected = 141,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ContextMenu, ToolTip.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.ContextMenu),
                typeof(System.Windows.Controls.ToolTip)}, "Opened", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Opened Event.")]
        Opened = 142,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ContextMenu, ToolTip.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.ContextMenu),
                typeof(System.Windows.Controls.ToolTip)}, "Closed", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Closed Event.")]
        Closed_RoutedEventHandler = 143,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "ColumnDisplayIndexChanged", typeof(System.EventHandler<System.Windows.Controls.DataGridColumnEventArgs>), typeof(System.Windows.Controls.DataGridColumnEventArgs), "Enum for the ColumnDisplayIndexChanged Event.")]
        ColumnDisplayIndexChanged = 144,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "LoadingRow", typeof(System.EventHandler<System.Windows.Controls.DataGridRowEventArgs>), typeof(System.Windows.Controls.DataGridRowEventArgs), "Enum for the LoadingRow Event.")]
        LoadingRow = 145,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "UnloadingRow", typeof(System.EventHandler<System.Windows.Controls.DataGridRowEventArgs>), typeof(System.Windows.Controls.DataGridRowEventArgs), "Enum for the UnloadingRow Event.")]
        UnloadingRow = 146,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "RowEditEnding", typeof(System.EventHandler<System.Windows.Controls.DataGridRowEditEndingEventArgs>), typeof(System.Windows.Controls.DataGridRowEditEndingEventArgs), "Enum for the RowEditEnding Event.")]
        RowEditEnding = 147,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "CellEditEnding", typeof(System.EventHandler<System.Windows.Controls.DataGridCellEditEndingEventArgs>), typeof(System.Windows.Controls.DataGridCellEditEndingEventArgs), "Enum for the CellEditEnding Event.")]
        CellEditEnding = 148,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "CurrentCellChanged", typeof(System.EventHandler<System.EventArgs>), typeof(System.EventArgs), "Enum for the CurrentCellChanged Event.")]
        CurrentCellChanged = 149,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "BeginningEdit", typeof(System.EventHandler<System.Windows.Controls.DataGridBeginningEditEventArgs>), typeof(System.Windows.Controls.DataGridBeginningEditEventArgs), "Enum for the BeginningEdit Event.")]
        BeginningEdit = 150,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "PreparingCellForEdit", typeof(System.EventHandler<System.Windows.Controls.DataGridPreparingCellForEditEventArgs>), typeof(System.Windows.Controls.DataGridPreparingCellForEditEventArgs), "Enum for the PreparingCellForEdit Event.")]
        PreparingCellForEdit = 151,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "AddingNewItem", typeof(System.EventHandler<System.Windows.Controls.AddingNewItemEventArgs>), typeof(System.Windows.Controls.AddingNewItemEventArgs), "Enum for the AddingNewItem Event.")]
        AddingNewItem = 152,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "InitializingNewItem", typeof(System.Windows.Controls.InitializingNewItemEventHandler), typeof(System.Windows.Controls.InitializingNewItemEventArgs), "Enum for the InitializingNewItem Event.")]
        InitializingNewItem = 153,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "LoadingRowDetails", typeof(System.EventHandler<System.Windows.Controls.DataGridRowDetailsEventArgs>), typeof(System.Windows.Controls.DataGridRowDetailsEventArgs), "Enum for the LoadingRowDetails Event.")]
        LoadingRowDetails = 154,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "UnloadingRowDetails", typeof(System.EventHandler<System.Windows.Controls.DataGridRowDetailsEventArgs>), typeof(System.Windows.Controls.DataGridRowDetailsEventArgs), "Enum for the UnloadingRowDetails Event.")]
        UnloadingRowDetails = 155,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "RowDetailsVisibilityChanged", typeof(System.EventHandler<System.Windows.Controls.DataGridRowDetailsEventArgs>), typeof(System.Windows.Controls.DataGridRowDetailsEventArgs), "Enum for the RowDetailsVisibilityChanged Event.")]
        RowDetailsVisibilityChanged = 156,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "SelectedCellsChanged", typeof(System.Windows.Controls.SelectedCellsChangedEventHandler), typeof(System.Windows.Controls.SelectedCellsChangedEventArgs), "Enum for the SelectedCellsChanged Event.")]
        SelectedCellsChanged = 157,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "Sorting", typeof(System.Windows.Controls.DataGridSortingEventHandler), typeof(System.Windows.Controls.DataGridSortingEventArgs), "Enum for the Sorting Event.")]
        Sorting = 158,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "AutoGeneratedColumns", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the AutoGeneratedColumns Event.")]
        AutoGeneratedColumns = 159,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "AutoGeneratingColumn", typeof(System.EventHandler<System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs>), typeof(System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs), "Enum for the AutoGeneratingColumn Event.")]
        AutoGeneratingColumn = 160,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "ColumnReordering", typeof(System.EventHandler<System.Windows.Controls.DataGridColumnReorderingEventArgs>), typeof(System.Windows.Controls.DataGridColumnReorderingEventArgs), "Enum for the ColumnReordering Event.")]
        ColumnReordering = 161,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "ColumnHeaderDragStarted", typeof(System.EventHandler<System.Windows.Controls.Primitives.DragStartedEventArgs>), typeof(System.Windows.Controls.Primitives.DragStartedEventArgs), "Enum for the ColumnHeaderDragStarted Event.")]
        ColumnHeaderDragStarted = 162,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "ColumnHeaderDragDelta", typeof(System.EventHandler<System.Windows.Controls.Primitives.DragDeltaEventArgs>), typeof(System.Windows.Controls.Primitives.DragDeltaEventArgs), "Enum for the ColumnHeaderDragDelta Event.")]
        ColumnHeaderDragDelta = 163,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "ColumnHeaderDragCompleted", typeof(System.EventHandler<System.Windows.Controls.Primitives.DragCompletedEventArgs>), typeof(System.Windows.Controls.Primitives.DragCompletedEventArgs), "Enum for the ColumnHeaderDragCompleted Event.")]
        ColumnHeaderDragCompleted = 164,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "ColumnReordered", typeof(System.EventHandler<System.Windows.Controls.DataGridColumnEventArgs>), typeof(System.Windows.Controls.DataGridColumnEventArgs), "Enum for the ColumnReordered Event.")]
        ColumnReordered = 165,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DataGrid.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DataGrid)}, "CopyingRowClipboardContent", typeof(System.EventHandler<System.Windows.Controls.DataGridRowClipboardEventArgs>), typeof(System.Windows.Controls.DataGridRowClipboardEventArgs), "Enum for the CopyingRowClipboardContent Event.")]
        CopyingRowClipboardContent = 166,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DatePicker.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DatePicker)}, "CalendarClosed", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the CalendarClosed Event.")]
        CalendarClosed = 167,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DatePicker.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DatePicker)}, "CalendarOpened", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the CalendarOpened Event.")]
        CalendarOpened = 168,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DatePicker.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DatePicker)}, "DateValidationError", typeof(System.EventHandler<System.Windows.Controls.DatePickerDateValidationErrorEventArgs>), typeof(System.Windows.Controls.DatePickerDateValidationErrorEventArgs), "Enum for the DateValidationError Event.")]
        DateValidationError = 169,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DatePicker.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.DatePicker)}, "SelectedDateChanged", typeof(System.EventHandler<System.Windows.Controls.SelectionChangedEventArgs>), typeof(System.Windows.Controls.SelectionChangedEventArgs), "Enum for the SelectedDateChanged Event.")]
        SelectedDateChanged = 170,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DocumentViewerBase.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.DocumentViewerBase)}, "PageViewsChanged", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the PageViewsChanged Event.")]
        PageViewsChanged = 171,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Expander, TreeViewItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Expander),
                typeof(System.Windows.Controls.TreeViewItem)}, "Expanded", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Expanded Event.")]
        Expanded = 172,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Expander, TreeViewItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Expander),
                typeof(System.Windows.Controls.TreeViewItem)}, "Collapsed", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the Collapsed Event.")]
        Collapsed = 173,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Thumb.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.Thumb)}, "DragStarted", typeof(System.Windows.Controls.Primitives.DragStartedEventHandler), typeof(System.Windows.Controls.Primitives.DragStartedEventArgs), "Enum for the DragStarted Event.")]
        DragStarted = 174,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Thumb.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.Thumb)}, "DragDelta", typeof(System.Windows.Controls.Primitives.DragDeltaEventHandler), typeof(System.Windows.Controls.Primitives.DragDeltaEventArgs), "Enum for the DragDelta Event.")]
        DragDelta = 175,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Thumb.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.Thumb)}, "DragCompleted", typeof(System.Windows.Controls.Primitives.DragCompletedEventHandler), typeof(System.Windows.Controls.Primitives.DragCompletedEventArgs), "Enum for the DragCompleted Event.")]
        DragCompleted = 176,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Image.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Image)}, "ImageFailed", typeof(System.EventHandler<System.Windows.ExceptionRoutedEventArgs>), typeof(System.Windows.ExceptionRoutedEventArgs), "Enum for the ImageFailed Event.")]
        ImageFailed = 177,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "StrokeCollected", typeof(System.Windows.Controls.InkCanvasStrokeCollectedEventHandler), typeof(System.Windows.Controls.InkCanvasStrokeCollectedEventArgs), "Enum for the StrokeCollected Event.")]
        StrokeCollected = 178,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "Gesture", typeof(System.Windows.Controls.InkCanvasGestureEventHandler), typeof(System.Windows.Controls.InkCanvasGestureEventArgs), "Enum for the Gesture Event.")]
        Gesture = 179,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "StrokesReplaced", typeof(System.Windows.Controls.InkCanvasStrokesReplacedEventHandler), typeof(System.Windows.Controls.InkCanvasStrokesReplacedEventArgs), "Enum for the StrokesReplaced Event.")]
        StrokesReplaced = 180,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "DefaultDrawingAttributesReplaced", typeof(System.Windows.Ink.DrawingAttributesReplacedEventHandler), typeof(System.Windows.Ink.DrawingAttributesReplacedEventArgs), "Enum for the DefaultDrawingAttributesReplaced Event.")]
        DefaultDrawingAttributesReplaced = 181,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "ActiveEditingModeChanged", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the ActiveEditingModeChanged Event.")]
        ActiveEditingModeChanged = 182,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "EditingModeChanged", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the EditingModeChanged Event.")]
        EditingModeChanged = 183,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "EditingModeInvertedChanged", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the EditingModeInvertedChanged Event.")]
        EditingModeInvertedChanged = 184,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "SelectionMoving", typeof(System.Windows.Controls.InkCanvasSelectionEditingEventHandler), typeof(System.Windows.Controls.InkCanvasSelectionEditingEventArgs), "Enum for the SelectionMoving Event.")]
        SelectionMoving = 185,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "SelectionMoved", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the SelectionMoved Event.")]
        SelectionMoved = 186,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "StrokeErasing", typeof(System.Windows.Controls.InkCanvasStrokeErasingEventHandler), typeof(System.Windows.Controls.InkCanvasStrokeErasingEventArgs), "Enum for the StrokeErasing Event.")]
        StrokeErasing = 187,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "StrokeErased", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the StrokeErased Event.")]
        StrokeErased = 188,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "SelectionResizing", typeof(System.Windows.Controls.InkCanvasSelectionEditingEventHandler), typeof(System.Windows.Controls.InkCanvasSelectionEditingEventArgs), "Enum for the SelectionResizing Event.")]
        SelectionResizing = 189,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "SelectionResized", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the SelectionResized Event.")]
        SelectionResized = 190,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "SelectionChanging", typeof(System.Windows.Controls.InkCanvasSelectionChangingEventHandler), typeof(System.Windows.Controls.InkCanvasSelectionChangingEventArgs), "Enum for the SelectionChanging Event.")]
        SelectionChanging = 191,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: InkCanvas.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.InkCanvas)}, "SelectionChanged", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the SelectionChanged Event.")]
        SelectionChanged_EventHandler = 192,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: MediaElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.MediaElement)}, "MediaFailed", typeof(System.EventHandler<System.Windows.ExceptionRoutedEventArgs>), typeof(System.Windows.ExceptionRoutedEventArgs), "Enum for the MediaFailed Event.")]
        MediaFailed = 193,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: MediaElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.MediaElement)}, "MediaOpened", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the MediaOpened Event.")]
        MediaOpened = 194,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: MediaElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.MediaElement)}, "BufferingStarted", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the BufferingStarted Event.")]
        BufferingStarted = 195,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: MediaElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.MediaElement)}, "BufferingEnded", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the BufferingEnded Event.")]
        BufferingEnded = 196,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: MediaElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.MediaElement)}, "ScriptCommand", typeof(System.EventHandler<System.Windows.MediaScriptCommandRoutedEventArgs>), typeof(System.Windows.MediaScriptCommandRoutedEventArgs), "Enum for the ScriptCommand Event.")]
        ScriptCommand = 197,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: MediaElement.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.MediaElement)}, "MediaEnded", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the MediaEnded Event.")]
        MediaEnded = 198,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: MenuItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.MenuItem)}, "SubmenuOpened", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the SubmenuOpened Event.")]
        SubmenuOpened = 202,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: MenuItem.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.MenuItem)}, "SubmenuClosed", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the SubmenuClosed Event.")]
        SubmenuClosed = 203,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: PasswordBox.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.PasswordBox)}, "PasswordChanged", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the PasswordChanged Event.")]
        PasswordChanged = 201,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: RangeBase.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.RangeBase)}, "ValueChanged", typeof(System.Windows.RoutedPropertyChangedEventHandler<double>), typeof(double), "Enum for the ValueChanged Event.")]
        ValueChanged = 202,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: TextBoxBase.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.TextBoxBase)}, "TextChanged", typeof(System.Windows.Controls.TextChangedEventHandler), typeof(System.Windows.Controls.TextChangedEventArgs), "Enum for the TextChanged Event.")]
        TextChanged = 203,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: TextBoxBase.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.TextBoxBase)}, "SelectionChanged", typeof(System.Windows.RoutedEventHandler), typeof(System.Windows.RoutedEventArgs), "Enum for the SelectionChanged Event.")]
        SelectionChanged_RoutedEventHandler = 204,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ScrollViewer.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.ScrollViewer)}, "ScrollChanged", typeof(System.Windows.Controls.ScrollChangedEventHandler), typeof(System.Windows.Controls.ScrollChangedEventArgs), "Enum for the ScrollChanged Event.")]
        ScrollChanged = 205,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: TreeView.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.TreeView)}, "SelectedItemChanged", typeof(System.Windows.RoutedPropertyChangedEventHandler<dynamic>), typeof(object), "Enum for the SelectedItemChanged Event.")]
        SelectedItemChanged = 206,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: HwndHost.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Interop.HwndHost)}, "MessageHook", typeof(System.Windows.Interop.HwndSourceHook), typeof(int), "Enum for the MessageHook Event.")]
        MessageHook = 210,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DocumentPageView.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.DocumentPageView)}, "PageConnected", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the PageConnected Event.")]
        PageConnected = 208,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: DocumentPageView.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.DocumentPageView)}, "PageDisconnected", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the PageDisconnected Event.")]
        PageDisconnected = 209,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: Popup.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.Popup)}, "Opened", typeof(System.EventHandler), typeof(System.EventArgs), "Enum for the Opened Event.")]
        Opened_EventHandler = 210,
        
        /// <summary>
        /// This value can be used for all elements that derive from or declare at least one of the following types: ScrollBar.
        /// </summary>
        [EventDescription(new System.Type[] {
                typeof(System.Windows.Controls.Primitives.ScrollBar)}, "Scroll", typeof(System.Windows.Controls.Primitives.ScrollEventHandler), typeof(System.Windows.Controls.Primitives.ScrollEventArgs), "Enum for the Scroll Event.")]
        Scroll = 211,
    }
}
